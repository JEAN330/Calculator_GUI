一、	命名规范
1.	包名小写；成员变量、方法参数等首字母小写；类名首字母大写；变量命名方式依照Camel法则
2.	命名尽可能短，表意准确，不建议数字出现在命名中
3.	类名尽量不要重名，严禁局部变量与类或对象成员变量同名
二、	注释规范
1.	复杂的分支流程需注释
2.	注释清晰且必要
3.	//注释一行，/**/注释多行
4.	对代码的注释应放在其上方相邻位置，不可放在下面
5.	对数据结构的注释应放在其上方相邻位置，不可放在下面
6.	对结构中的每个域的注释应放在此域的右方
三、	声明、空白、缩进
1.	每行声明一个变量
2.	代码段落适当以空行分隔，使程序更清晰
3.	代码行长度每行不得超过120个字符
4.	函数或过程的开始、结构的定义及循环、判断等语句中的代码都要采用缩进风格
四、	语句规范
1.	包含复合语句{}应成对出现，if, else while 等语句必须用{}包围
2.	for循环使用包含下限不包含上限的一般形式
3.	单个函数应执行单个功能并与命名相符
4.	单个变量只做单个用途
五、	函数规范
1.	对有异常抛出的方法都应执行try…catch保护
2.	线程处理函数内部有异常捕获处理，防止线程抛出异常
3.	异常捕获后进行日志记录或异常继续抛出
4.	函数对错误的处理恰当
5.	将重复代码 抽象成私有函数
六、  Java编码其它约定
1.使用StringBuffer 对象：在处理String 的时候要尽量使用StringBuffer 类， StringBuffer 类是构成String 类的基础。String 类将StringBuffer 类封装了起
来，（以花费更多时间为代价）为开发人员提供了一个安全的接口。
2. 避免太多的使用 synchronized 关键字：避免不必要的使用关键字 synchronized，应该在必要的时候再使用它，这是一个避免死锁的好方法。必须使用时，也尽量控制范 围，最好在块级控制。
3. 避免使用java.util.Vector 类：因为Vector 是is synchronized.\，所以使用 java.util.Vector 类在性能上会有所减低。 
4. 尽量使用接口而不是一个具体的类

to be continued
